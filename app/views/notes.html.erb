------------------------
  NOTES
------------------------


------------------------------------------------
cost to consider for app events
------------------------------------------------
event   :  2.5hrs [18:30 - 21:00]
hosts   :  paid £15/hr | per/event: £30 ---- £30/hr | per/event: £60
ticket  :  £25:00
venue   :  £400/2.5hrs [max price to consider]
subies  :  £15/mth ---- £25/mth


12 attendees | 06 men 06 women - 30min [30m] | ie. I spoke to 06 people [5min each] in 30min
24 attendees | 12 men 12 women - 60min [1hr] | ie. I spoke to 12 people [5min each] in 01hr

48 attendees | 24 men 24 women - 120min [2hr]| ie. I spoke to 24 people [5min each] in 02hr




------------------------------------------------
an example of an event to look at
------------------------------------------------

w:https://www.originaldating.com/london-events-list/





------------------------------------------------
creating host table in SCHEMA
------------------------------------------------
table: host
user_id
event_id

with this you can assign a host to more than event
event has_many users through host
user has_many events throught host


with this you can't assign a host to more than event
event has_many hosts 
host belongs_event



------------------------------------------------
creating card table in SCHEMA
------------------------------------------------
table: card
event_id

card belongs_to an event
event has_one card





------------------------------------------------
details regarding STRIPE implementation contact
------------------------------------------------
---------- Forwarded message ----------
From: Alex Seleska <alex@razoredge-media.co.uk>
Date: 12 September 2016 at 13:16
Subject: Stripe Support
To: ashon@phundee.com


Hi Ashon,
 
Further to our phone conversation this afternoon, I can confirm we are very experienced with dealing with Stripe and can deal with most issues or integration problems that are faced.
 
If anyone you know needs our help, please get them to contact the office on 01376 44 00 23 or email me directly and we can discuss the issues to see if we can help.
Thank you for you call.
 
Kind Regards
 
Alex Seleska
Director
Razor Edge Media Ltd
T: 01376 44 00 23
M: 07739 408 746
W: www.razoredge-media.co.uk



------------------------------------------------
details regarding STRIPE usage
------------------------------------------------
Can I use the same Stripe account for multiple websites or businesses?
https://support.stripe.com/questions/stripe-account-for-multiple-projects

Answer: No, we’d highly recommend avoiding this





------------------------------------------------
javascript coding for filters
------------------------------------------------
jQuery ->
  topics = $('#q_category_topic_id_eq').html()
  $('#q_category_country_id_eq').change ->
    country = $('#q_category_country_id_eq :selected').text()
    escaped_country = country.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g, '\\$1')
    options = $(topics).filter("optgroup[label='#{escaped_country}']").html()
    if options
      $('#q_category_topic_id_eq').html(options)
      $('#q_category_topic_id_eq').parent().show()
    else
      $('#q_category_topic_id_eq').empty()
      $('#q_category_topic_id_eq').parent().hide()


jQuery ->
  $('#q_category_age_id_eq').find("optgroup[label]").hide()
  ages = $('#q_category_age_id_eq').html()
  $('#q_category_topic_id_eq').change ->
    topic = $('#q_category_topic_id_eq :selected').text()
    escaped_topic = topic.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/@])/g, '\\$1')
    options = $(ages).filter("optgroup[label='#{escaped_topic}']").html()
    if options
      $('#q_category_age_id_eq').html(options)
      $('#q_category_age_id_eq').parent().show()
    else
      $('#q_category_age_id_eq').empty()
      $('#q_category_age_id_eq').parent().hide()



------------------------------------------------
payment_controller.rb original content
------------------------------------------------
class PaymentsController < ApplicationController
  before_action :set_payment, only: [:show, :edit, :update, :destroy]

  def index
    @payments = Payment.all
  end

  def show
  end

  def new
    @subscription_id = params[:subscription_id]
    @event_id = params[:event_id]
    @payment = Payment.new
    if @subscription_id.present?
      @subscription = Subscription.find(params[:subscription_id])
    elsif @event_id.present?
      @event = Event.find(params[:event_id])
    end
  end

  def edit
  end

  def create
    @payment = Payment.new(payment_params)

    respond_to do |format|
      if @payment.save
        format.html { redirect_to @payment, notice: 'Payment was successfully created.' }
        format.json { render :show, status: :created, location: @payment }
      else
        format.html { render :new }
        format.json { render json: @payment.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @payment.update(payment_params)
        format.html { redirect_to @payment, notice: 'Payment was successfully updated.' }
        format.json { render :show, status: :ok, location: @payment }
      else
        format.html { render :edit }
        format.json { render json: @payment.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    @payment.destroy
    respond_to do |format|
      format.html { redirect_to payments_url, notice: 'Payment was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  def is_path?(*paths)
    paths.include?(request.path)
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_payment
      @payment = Payment.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def payment_params
      params.require(:payment).permit(:email, :user_id, :subscription_id, :reference, :event_id)
    end
end


